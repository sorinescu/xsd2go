// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for {{ .TargetNamespace }}
{{$packageName := .GoPackageName -}}
package {{ $packageName }}

import (
    {{- range .GoImportsNeeded}}
        "{{ . }}"
    {{- end }}
)

// SubstitutingElements
{{- range $key, $val := .SubstitutingElements}}
//   {{ $key.GoName }} substitutes {{ $val.GoName }}
{{- end}}

// SubstitutedElements
{{- range $key, $vals := .SubstitutedElements}}
//   {{ $key.GoName }}
    {{- range $vals}}
//       substituted by {{.GoName }}
    {{- end}}
{{- end}}

{{range .ExportableElements }}
// Element
type {{ .GoTypeName }} struct {
    XMLName xml.Name `xml:{{.Name}}`

    {{- if .GoBaseTypeName}}
    // BaseType
    {{.GoBaseTypeName}}
    {{- end}}

    {{- if .Attributes}}
    // Attributes
    {{- end}}
    {{- range .Attributes }}
        {{ .GoName }} string `xml:"{{.XmlName}},{{.Modifiers}}"`
    {{- end }}

    {{- if .Elements}}
    // Elements
    {{- end}}
    {{- range .Elements }}
      {{ $el := . -}}
      {{ .GoFieldName}} {{.GoMemLayout}}{{ .GoTypeName }} `xml:"{{.XmlName}}"`

      {{- range .SubstitutingElements }}
        // Substitution for '{{ $el.GoName }}'
        {{ .GoFieldName}} {{$el.GoMemLayout}}{{ .GoTypeName }} `xml:"{{.XmlName}}"`
      {{- end }}
    {{- end }}

    {{- if .ContainsText }}
      // ContainsText
      Text string `xml:",chardata"`
    {{- end}}
}
{{end}}

// XSD ComplexType declarations
{{range .ExportableComplexTypes }}
type {{ .GoTypeName }} struct {
    {{- if .GoBaseTypeName}}
    // BaseType
    {{.GoBaseTypeName}}
    {{- end}}

    {{- if .Attributes}}
    // Attributes
    {{- end}}
    {{- range .Attributes }}
    {{ .GoName }} string `xml:"{{.XmlName}},{{.Modifiers}}"`
    {{- end }}

    {{- if .Elements}}
    // Elements
    {{- end}}
  {{- range .Elements }}
    {{ $el := . -}}
    {{ .GoFieldName}} {{.GoMemLayout}}{{ .GoTypeName }} `xml:"{{.XmlName}}"`

    {{- range .SubstitutingElements }}
    // Substitution for '{{ $el.GoName }}'
    {{ .GoFieldName}} {{$el.GoMemLayout}}{{ .GoTypeName }} `xml:"{{.XmlName}}"`
    {{- end }}
  {{- end}}

  {{- if .ContainsText }}
    // ContainsText
    Text string `xml:",chardata"`
  {{- end}}
  {{- if .ContainsInnerXml }}
    // ContainsInnerXml
    InnerXml string `xml:",innerxml"`
  {{- end}}
}
{{end}}